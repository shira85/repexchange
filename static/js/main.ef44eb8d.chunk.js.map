{"version":3,"sources":["component/Changing.js","component/Exchange.js","component/Coin.js","App.js","serviceWorker.js","index.js"],"names":["Changing","props","deleteExchange","delete","index","state","style","backgroundColor","borderRadius","borderStyle","width","height","this","from","to","onClick","sum","calc","Component","Exchange","fromType","e","setState","target","value","toType","sumToExchange","showList","showExchangeList","exchange","map","i","exchangeCoin","valFrom","coin","filter","type","valTo","addExchange","viewExchange","marginLeft","textAlign","float","onChange","selected","disabled","hidden","placeholder","position","left","href","Coin","validType","char","slice","length","indexOf","validNewValue","newValue","updateCoinList","toLowerCase","update","add","border","borderCollapse","App","listCoins","updateValue","addType","temp","item","indx","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef44eb8d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Changing extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             \r\n        }\r\n    }\r\n    deleteExchange=()=>{\r\n        this.props.delete(this.props.index)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{backgroundColor:'yellowgreen',borderRadius:'10px',borderStyle:'solid',width:'200px',height:'80px'}}>\r\n                    # {this.props.index+1} <br/>\r\n                    From {this.props.from} To {this.props.to}\r\n                    <button onClick={this.deleteExchange}>X</button><br/>\r\n                    {this.props.sum}= {this.props.calc}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport Changing from './Changing.js';\r\n\r\nexport default class Exchange extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             fromType:'',\r\n             toType:'',\r\n             sumToExchange:'',\r\n             showExchangeList:false,\r\n        }\r\n    }\r\n\r\n    fromType=(e)=>{\r\n        this.setState({fromType:e.target.value})\r\n    }\r\n    toType=(e)=>{\r\n        this.setState({toType:e.target.value})\r\n\r\n    }\r\n    sumToExchange=(e)=>{\r\n        this.setState({sumToExchange:e.target.value})\r\n    }\r\n\r\n    showList=()=>{\r\n        if(this.state.showExchangeList==true)\r\n        //debugger\r\n        {\r\n           \r\n            return(<div>\r\n                {this.props.exchange.map((e,i)=>{\r\n                return(\r\n                    <Changing index={i} from={e.from} to={e.to} sum={e.sum} calc={e.calc} delete={this.props.delete}/>\r\n                )\r\n            })}\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    exchangeCoin=()=>{\r\n        //debugger\r\n        let calc;\r\n        let valFrom=this.props.coin.filter(e=>e.type==this.state.fromType);\r\n        let valTo=this.props.coin.filter(e=>e.type==this.state.toType);\r\n        //נחלק את סוג המטבע שממנו נמיר לסוג המטבע שאליו נמיר לפי הערכים בטבלה ואז נכפיל בכמות המטבעות\r\n        calc=((valFrom[0].value/valTo[0].value)*this.state.sumToExchange);\r\n        //console.log(calc);\r\n        this.props.addExchange(this.state.fromType,this.state.toType,this.state.sumToExchange,calc)\r\n       \r\n    }\r\n    viewExchange=()=>{\r\n        this.setState({showExchangeList:!this.state.showExchangeList})\r\n    }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div style={{backgroundColor:'yellow', width:'30%',marginLeft:'20%',height:'300px'}}>\r\n                <h1 style={{textAlign:'center'}}>Exchange</h1>\r\n                <div >\r\n                    From:<div style={{width:'20px',height:'20px', float:'left'}}></div>\r\n                    <select onChange={this.fromType}>\r\n                        <option selected disabled hidden>type</option>\r\n                        {this.props.coin.map((e)=><option value={e.type}>{e.type}</option>)}\r\n                    </select>\r\n                    <input onChange={this.sumToExchange} type='number' placeholder='Enter sum exchange'/>\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    To: <div style={{width:'20px',height:'20px', float:'left'}}></div>\r\n                    <select  onChange={this.toType}>\r\n                        <option selected disabled hidden>type</option>\r\n                        {this.props.coin.map((e)=><option value={e.type}>{e.type}</option>)}\r\n                    </select>\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n                {/**אם שלושת הערכים או אפילו אחד מהם ריק, הכפתור לא פעיל */}\r\n                <button onClick={this.exchangeCoin} disabled={!(this.state.toType && this.state.fromType && this.state.sumToExchange)} style={{position:'relative', left:'100px'}}>start</button>\r\n                <br/>\r\n                <Link to='/coin' ><button>Update</button></Link><button><a href=\"http://facebook.com\">Share on facebook</a></button><button onClick={this.viewExchange}>View your Exchange list</button>\r\n            <div>\r\n            {this.showList()}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class Coin extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             type:'',\r\n             newValue:'',\r\n        }\r\n    }\r\n    validType=(e)=>{\r\n        //משתנה שמכיל את התו האחרון שהוקלד ע\"מ לבדוק אם הוזן תו תקין\r\n        let char=e.target.value.slice(e.target.value.length-1,e.target.value.length);\r\n        //משתנה שמכיל את מיקום התו , במידה ואינו תקין לא יהיה ניתן להקלידו\r\n        let index=e.target.value.indexOf(char);\r\n        //אם התו לא בטווח התווים שבתנאי- הוא לא יוקלד\r\n        if(char>='A'&& char<='Z'||char>='a'&& char<='z')\r\n        {\r\n            this.setState({type:e.target.value})\r\n        }\r\n        else\r\n        {\r\n            e.target.value = (e.target.value.slice(0,index));\r\n            this.setState({type:e.target.value})\r\n        }\r\n    }\r\n    validNewValue=(e)=>{\r\n        this.setState({newValue:e.target.value})\r\n    }\r\n    updateCoinList=()=>{\r\n        let index='';\r\n        //מיון על אברי המערך, עד שנמצא מטבע שנרצה לעדכן\r\n        this.props.coin.filter((e,i)=>\r\n        //המרת 2 הערכים לאותיות קטנות, כאשר יכנס ערך הוא לא יכנס כפול בגלל חוסר התאמה בין אותיות קטנות לגדולות\r\n        {if(e.type.toLowerCase()===this.state.type.toLowerCase()){\r\n            //אם המטבע קיים במערך המטבעות, נשמור את האינדקס שלו ונשלח עם פרופס\r\n            index=i;\r\n            this.props.update(this.state.type,this.state.newValue,index)\r\n        }\r\n        if(index==='')\r\n        {\r\n            // אם המטבע לא קיים- ניצור מטבע חדש ונוסיף לרשימת המטבעות\r\n            this.props.add(this.state.type,this.state.newValue)\r\n        }\r\n         })\r\n        \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>UPDATE</h1>\r\n                <div>\r\n                    <table style={{border:'solid',borderCollapse:'collapse'}}>\r\n                        <th style={{border:'solid'}}>Type</th>\r\n                        <th style={{border:'solid'}}>Value</th>\r\n                        {this.props.coin.map((e)=><tr style={{border:'solid'}}><td style={{border:'solid'}}>{e.type}</td><td style={{border:'solid'}}>{e.value}</td></tr>)}\r\n                    </table>\r\n                </div>\r\n                \r\n                type: <input onChange={this.validType} type='text'/><br/>\r\n                new value: <input onChange={this.validNewValue} type='number'/>\r\n                <div>\r\n                    <Link to='/'><button>Back</button></Link> <button onClick={this.updateCoinList} disabled={!(this.state.type && this.state.newValue)}>Update</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport {HashRouter as Router,Switch,Route} from 'react-router-dom';\nimport Exchange from './component/Exchange.js';\nimport Coin from './component/Coin.js';\n\nexport default class App extends Component {\n  state={\n    listCoins:[{type:'Dollar',value:4},{type:'Euro', value: 5},{type:'Shekel',value:1}],\n    exchange:[],\n  }\n\n  updateValue=(type,value,index)=>\n  {\n    this.state.listCoins[index].type=type;\n    this.state.listCoins[index].value=value;\n    this.setState({listCoins:[...this.state.listCoins]})\n  }\n\n  addType=(type,value)=>{\n    this.setState({listCoins:[...this.state.listCoins,{type,value}]})\n  }\n  // הוספת המרה למערך ההמרות\n  addExchange=(from,to,sum,calc)=>{\n    this.setState({exchange:[...this.state.exchange,{from,to,sum,calc}]})\n  }\n  deleteExchange=(index)=>{\n      let temp=this.state.exchange.filter((item,indx)=>(indx!=index)); //לא נשתמש באייטם אבל חייב לכתוב אותו על מנת לקבל את הערך השני\n      this.setState({exchange:[...temp]});\n  }\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n          <Route exact path='/'component={()=>{return <Exchange coin={this.state.listCoins} addExchange={this.addExchange} exchange={this.state.exchange} delete={this.deleteExchange}/>}}/>\n          <Route exact path='/coin'component={()=>{return <Coin coin={this.state.listCoins} update={this.updateValue} add={this.addType}/>}}/>\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}